<?php

namespace Birds\ObservationsBundle\Repository;
use Doctrine\ORM\QueryBuilder;

/**
 * ObservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ObservationRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param $number Nombre de résultats à afficher
     * @return array
     */
    public function findLastValid($number)
    {
        $qb = $this->_em->createQueryBuilder()
            ->select('o')
            ->from('BirdsObservationsBundle:Observation','o')
            ->where('o.valid = :val')
            ->setParameter('val',true)
            ->orderBy('o.id','DESC')
            ->setMaxResults($number);
        return $qb->getQuery()->getResult();

    }


    /**
     * @param $user Utilisateur dont il faut récupérer l
     * @param $valid boolean : true récupère les observations valides.
     * @return array Les observations valides de l'utilisateur
     */
    public function findByAuthorValid($user,$valid)
    {
        $qb = $this->_em->createQueryBuilder()
            ->select('o')
            ->from('BirdsObservationsBundle:Observation','o')
            ->where('o.valid = :val')
            ->setParameter('val',$valid)
            ->andWhere('o.user = :user')
            ->setParameter('user',$user);

        return $qb->getQuery()->getResult();
    }



    /** PARTIE RECHERCHE **/


    /**
     * @return QueryBuilder
     */
    public function createQuery()
    {
        $qb = $this->_em->createQueryBuilder()
            ->select('o')
            ->from('BirdsObservationsBundle:Observation','o');

        return $qb;
    }

    /**
     * @param $content : string
     * Function that search within 3 fields the $content.
     * @return QueryBuilder
     */
    public function searchForString($content, QueryBuilder $qb)
    {
        $qb->where($qb->expr()->orX(
            $qb->expr()->like("o.birdname", "?1"),
            $qb->expr()->like("o.title", "?2"),
            $qb->expr()->like("o.description", "?3"))
        )
        ->setParameters(array(1 => "%".$content."%", 2 => "%".$content."%", 3 => "%".$content."%"));
        return $qb;
    }

    /**
     * @param QueryBuilder $qb
     * @return array or null
     */
    public function sendQuery(QueryBuilder $qb)
    {
        return $qb->getQuery()->getResult();
    }

}




